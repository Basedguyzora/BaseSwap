import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Search, Star, TrendingUp, TrendingDown } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";

export default function TokenSelector({ isOpen, onClose, onSelect, selectedToken }) {
  const [searchQuery, setSearchQuery] = useState("");

  const { data: tokens = [], isLoading } = useQuery({
    queryKey: ['tokens'],
    queryFn: () => base44.entities.Token.list(),
    initialData: [],
  });

  const filteredTokens = tokens.filter(token =>
    token.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    token.symbol.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const popularTokens = tokens.filter(t => t.is_popular);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="bg-slate-900 border-white/10 text-white max-w-md">
        <DialogHeader>
          <DialogTitle>Select a token</DialogTitle>
        </DialogHeader>

        <div className="relative">
          <Search className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
          <Input
            placeholder="Search by name or symbol"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 bg-white/5 border-white/10 text-white"
          />
        </div>

        {!searchQuery && popularTokens.length > 0 && (
          <div className="space-y-2">
            <p className="text-sm text-gray-400">Popular tokens</p>
            <div className="flex flex-wrap gap-2">
              {popularTokens.slice(0, 4).map((token) => (
                <button
                  key={token.id}
                  onClick={() => onSelect(token)}
                  className="px-3 py-2 bg-white/5 hover:bg-white/10 rounded-lg transition-colors flex items-center gap-2"
                >
                  {token.logo_url && (
                    <img src={token.logo_url} alt={token.symbol} className="w-5 h-5 rounded-full" />
                  )}
                  <span className="font-medium">{token.symbol}</span>
                </button>
              ))}
            </div>
          </div>
        )}

        <ScrollArea className="h-80">
          <div className="space-y-1">
            {filteredTokens.map((token) => (
              <button
                key={token.id}
                onClick={() => onSelect(token)}
                disabled={selectedToken?.id === token.id}
                className={`w-full p-3 rounded-lg transition-all flex items-center justify-between ${
                  selectedToken?.id === token.id
                    ? "bg-white/5 opacity-50 cursor-not-allowed"
                    : "hover:bg-white/5"
                }`}
              >
                <div className="flex items-center gap-3">
                  {token.logo_url ? (
                    <img src={token.logo_url} alt={token.symbol} className="w-8 h-8 rounded-full" />
                  ) : (
                    <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full" />
                  )}
                  <div className="text-left">
                    <p className="font-medium">{token.symbol}</p>
                    <p className="text-sm text-gray-400">{token.name}</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-medium">${token.price_usd?.toFixed(2)}</p>
                  <div className={`text-sm flex items-center gap-1 ${
                    token.price_change_24h >= 0 ? "text-green-400" : "text-red-400"
                  }`}>
                    {token.price_change_24h >= 0 ? (
                      <TrendingUp className="w-3 h-3" />
                    ) : (
                      <TrendingDown className="w-3 h-3" />
                    )}
                    {Math.abs(token.price_change_24h)}%
                  </div>
                </div>
              </button>
            ))}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}
