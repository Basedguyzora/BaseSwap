import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { TrendingUp, DollarSign, Activity, Droplets } from "lucide-react";

export default function AnalyticsPage() {
  const { data: tokens = [] } = useQuery({
    queryKey: ['tokens'],
    queryFn: () => base44.entities.Token.list(),
    initialData: [],
  });

  const { data: pools = [] } = useQuery({
    queryKey: ['pools'],
    queryFn: () => base44.entities.LiquidityPool.list('-volume_24h'),
    initialData: [],
  });

  const { data: transactions = [] } = useQuery({
    queryKey: ['transactions'],
    queryFn: () => base44.entities.Transaction.list('-created_date'),
    initialData: [],
  });

  const generateVolumeData = () => {
    const data = [];
    for (let i = 6; i >= 0; i--) {
      data.push({
        day: i === 0 ? "Today" : `${i}d ago`,
        volume: Math.random() * 500000 + 200000,
      });
    }
    return data;
  };

  const volumeData = generateVolumeData();
  const totalVolume = pools.reduce((sum, p) => sum + p.volume_24h, 0);
  const totalLiquidity = pools.reduce((sum, p) => sum + p.liquidity_usd, 0);

  const topTokens = tokens.slice(0, 5);
  const COLORS = ['#3B82F6', '#8B5CF6', '#10B981', '#F59E0B', '#EF4444'];

  return (
    <div className="max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2">Analytics</h1>
        <p className="text-gray-400">Market overview and trading statistics</p>
      </div>

      {/* Key Metrics */}
      <div className="grid md:grid-cols-4 gap-4 mb-8">
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-sm text-gray-400">24h Volume</p>
              <DollarSign className="w-5 h-5 text-blue-400" />
            </div>
            <p className="text-2xl font-bold text-white">
              ${totalVolume.toLocaleString()}
            </p>
            <p className="text-sm text-green-400 mt-1">+18.2%</p>
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-sm text-gray-400">Total Liquidity</p>
              <Droplets className="w-5 h-5 text-purple-400" />
            </div>
            <p className="text-2xl font-bold text-white">
              ${totalLiquidity.toLocaleString()}
            </p>
            <p className="text-sm text-green-400 mt-1">+5.7%</p>
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-sm text-gray-400">Total Transactions</p>
              <Activity className="w-5 h-5 text-green-400" />
            </div>
            <p className="text-2xl font-bold text-white">
              {transactions.length}
            </p>
            <p className="text-sm text-green-400 mt-1">+24 today</p>
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-2">
              <p className="text-sm text-gray-400">Active Pools</p>
              <TrendingUp className="w-5 h-5 text-orange-400" />
            </div>
            <p className="text-2xl font-bold text-white">{pools.length}</p>
            <p className="text-sm text-gray-400 mt-1">On Base network</p>
          </CardContent>
        </Card>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        {/* Volume Chart */}
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-white">Trading Volume (7 Days)</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={volumeData}>
                <XAxis dataKey="day" stroke="#6B7280" />
                <YAxis stroke="#6B7280" />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "#1E293B",
                    border: "1px solid rgba(255,255,255,0.1)",
                    borderRadius: "8px",
                    color: "#fff",
                  }}
                  formatter={(value) => [`$${value.toLocaleString()}`, "Volume"]}
                />
                <Bar dataKey="volume" fill="url(#colorGradient)" radius={[8, 8, 0, 0]} />
                <defs>
                  <linearGradient id="colorGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#3B82F6" />
                    <stop offset="100%" stopColor="#8B5CF6" />
                  </linearGradient>
                </defs>
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Top Pools */}
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-white">Top Pools by Volume</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {pools.slice(0, 5).map((pool, index) => (
                <div key={pool.id} className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-medium text-sm">
                      #{index + 1}
                    </div>
                    <div>
                      <p className="font-medium text-white">
                        {pool.token_a}/{pool.token_b}
                      </p>
                      <p className="text-sm text-gray-400">
                        TVL: ${pool.liquidity_usd.toLocaleString()}
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-white">
                      ${pool.volume_24h.toLocaleString()}
                    </p>
                    <p className="text-sm text-green-400">{pool.apr.toFixed(2)}% APR</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Token Distribution */}
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-white">Top Tokens by Market Cap</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={topTokens}
                  dataKey="price_usd"
                  nameKey="symbol"
                  cx="50%"
                  cy="50%"
                  outerRadius={100}
                  label={(entry) => entry.symbol}
                >
                  {topTokens.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip
                  contentStyle={{
                    backgroundColor: "#1E293B",
                    border: "1px solid rgba(255,255,255,0.1)",
                    borderRadius: "8px",
                    color: "#fff",
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Price Changes */}
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-white">Top Movers (24h)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {tokens
                .sort((a, b) => Math.abs(b.price_change_24h) - Math.abs(a.price_change_24h))
                .slice(0, 5)
                .map((token) => (
                  <div key={token.id} className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {token.logo_url ? (
                        <img src={token.logo_url} alt={token.symbol} className="w-8 h-8 rounded-full" />
                      ) : (
                        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full" />
                      )}
                      <div>
                        <p className="font-medium text-white">{token.symbol}</p>
                        <p className="text-sm text-gray-400">{token.name}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="font-medium text-white">
                        ${token.price_usd.toFixed(2)}
                      </p>
                      <p className={`text-sm ${
                        token.price_change_24h >= 0 ? "text-green-400" : "text-red-400"
                      }`}>
                        {token.price_change_24h >= 0 ? "+" : ""}
                        {token.price_change_24h.toFixed(2)}%
                      </p>
                    </div>
                  </div>
                ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
