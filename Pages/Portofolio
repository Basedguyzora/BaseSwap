import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Wallet, TrendingUp, TrendingDown, Activity, ExternalLink } from "lucide-react";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";

export default function PortfolioPage() {
  const { data: transactions = [] } = useQuery({
    queryKey: ['transactions'],
    queryFn: () => base44.entities.Transaction.list('-created_date'),
    initialData: [],
  });

  const { data: pools = [] } = useQuery({
    queryKey: ['pools'],
    queryFn: () => base44.entities.LiquidityPool.list(),
    initialData: [],
  });

  const userPools = pools.filter(p => p.user_share > 0);
  const totalPortfolioValue = userPools.reduce((sum, p) => sum + p.user_liquidity_usd, 0);

  return (
    <div className="max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2">Portfolio</h1>
        <p className="text-gray-400">Track your positions and transaction history</p>
      </div>

      {/* Portfolio Overview */}
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        <Card className="bg-gradient-to-br from-blue-600/20 to-purple-600/20 border-blue-500/20 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <p className="text-sm text-gray-400">Total Value</p>
              <div className="bg-blue-500/20 rounded-full p-2">
                <Wallet className="w-5 h-5 text-blue-400" />
              </div>
            </div>
            <p className="text-3xl font-bold text-white mb-2">
              ${totalPortfolioValue.toLocaleString()}
            </p>
            <div className="flex items-center gap-1 text-sm text-green-400">
              <TrendingUp className="w-4 h-4" />
              +12.5% (24h)
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <p className="text-sm text-gray-400">Total Transactions</p>
              <div className="bg-purple-500/20 rounded-full p-2">
                <Activity className="w-5 h-5 text-purple-400" />
              </div>
            </div>
            <p className="text-3xl font-bold text-white mb-2">
              {transactions.length}
            </p>
            <p className="text-sm text-gray-400">
              {transactions.filter(t => t.status === 'completed').length} completed
            </p>
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <p className="text-sm text-gray-400">Fees Earned</p>
              <div className="bg-green-500/20 rounded-full p-2">
                <TrendingUp className="w-5 h-5 text-green-400" />
              </div>
            </div>
            <p className="text-3xl font-bold text-white mb-2">
              ${(totalPortfolioValue * 0.003).toFixed(2)}
            </p>
            <p className="text-sm text-gray-400">From liquidity pools</p>
          </CardContent>
        </Card>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        {/* Liquidity Positions */}
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-white">Liquidity Positions</CardTitle>
          </CardHeader>
          <CardContent>
            {userPools.length === 0 ? (
              <div className="text-center py-12">
                <Wallet className="w-12 h-12 text-gray-600 mx-auto mb-4" />
                <p className="text-gray-400">No liquidity positions</p>
              </div>
            ) : (
              <div className="space-y-3">
                {userPools.map((pool) => (
                  <div
                    key={pool.id}
                    className="p-4 bg-white/5 rounded-xl hover:bg-white/10 transition-colors"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <div className="flex items-center -space-x-2">
                          <div className="w-6 h-6 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full border-2 border-slate-900" />
                          <div className="w-6 h-6 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full border-2 border-slate-900" />
                        </div>
                        <span className="font-semibold text-white">
                          {pool.token_a}/{pool.token_b}
                        </span>
                      </div>
                      <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                        {pool.apr.toFixed(2)}% APR
                      </Badge>
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="text-gray-400">Your Liquidity</p>
                        <p className="text-white font-medium">
                          ${pool.user_liquidity_usd.toLocaleString()}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-400">Pool Share</p>
                        <p className="text-white font-medium">{pool.user_share}%</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Transaction History */}
        <Card className="bg-slate-900/50 border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-white">Recent Activity</CardTitle>
          </CardHeader>
          <CardContent>
            {transactions.length === 0 ? (
              <div className="text-center py-12">
                <Activity className="w-12 h-12 text-gray-600 mx-auto mb-4" />
                <p className="text-gray-400">No transactions yet</p>
              </div>
            ) : (
              <div className="space-y-3">
                {transactions.slice(0, 10).map((tx) => (
                  <div
                    key={tx.id}
                    className="p-4 bg-white/5 rounded-xl hover:bg-white/10 transition-colors"
                  >
                    <div className="flex items-start justify-between mb-2">
                      <div>
                        <p className="font-medium text-white">
                          {tx.type === 'swap' ? 'Swap' : tx.type === 'add_liquidity' ? 'Add Liquidity' : 'Remove Liquidity'}
                        </p>
                        <p className="text-sm text-gray-400 mt-1">
                          {tx.amount_from} {tx.token_from} â†’ {tx.amount_to.toFixed(4)} {tx.token_to}
                        </p>
                      </div>
                      <a
                        href={`https://basescan.org/tx/${tx.tx_hash}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-gray-400 hover:text-white transition-colors"
                      >
                        <ExternalLink className="w-4 h-4" />
                      </a>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-400">
                        {format(new Date(tx.created_date), "MMM d, yyyy HH:mm")}
                      </span>
                      <Badge className={
                        tx.status === 'completed'
                          ? "bg-green-500/20 text-green-400 border-green-500/30"
                          : "bg-yellow-500/20 text-yellow-400 border-yellow-500/30"
                      }>
                        {tx.status}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
